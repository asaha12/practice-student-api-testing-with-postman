{
	"info": {
		"_postman_id": "644089c5-29fc-4af3-8ff8-db7d78b4a6d1",
		"name": "Shanjida_Hride",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "29102125",
		"_collection_link": "https://lively-trinity-508373.postman.co/workspace/Hridee~217cf447-43f8-4966-8459-d9188a9a01a8/collection/29102125-644089c5-29fc-4af3-8ff8-db7d78b4a6d1?action=share&source=collection_link&creator=29102125"
	},
	"item": [
		{
			"name": "Get Student",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"var ststuscode = pm.response.code\r",
							"console.log(jsonData.length)\r",
							"\r",
							"if(ststuscode==200){\r",
							"var jsonData = pm.response.json()\r",
							"pm.test(\" 200 OK\", function(){\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"}\r",
							"else if(ststuscode==404){\r",
							"\r",
							"    pm.test(\"Not Found\", function(){\r",
							"    pm.response.to.have.status(404);\r",
							"    });\r",
							"}\r",
							"\r",
							"else if(ststuscode==200){\r",
							"\r",
							"    pm.test(\"OK\", function(){\r",
							"    pm.response.to.have.status(200);\r",
							"    });\r",
							"}\r",
							"\r",
							"else if(ststuscode==201){\r",
							"\r",
							"    pm.test(\"Created\", function(){\r",
							"    pm.response.to.have.status(201);\r",
							"    });\r",
							"}\r",
							"\r",
							"else if(ststuscode==202){\r",
							"\r",
							"    pm.test(\"Accepted\", function(){\r",
							"    pm.response.to.have.status(202);\r",
							"    });\r",
							"}\r",
							"\r",
							"else if(ststuscode==400){\r",
							"\r",
							"    pm.test(\"Bad Request\", function(){\r",
							"    pm.response.to.have.status(400);\r",
							"    });\r",
							"}\r",
							"\r",
							"else if(ststuscode==401){\r",
							"\r",
							"    pm.test(\"Unauthorized\", function(){\r",
							"    pm.response.to.have.status(401);\r",
							"    });\r",
							"}\r",
							"\r",
							"else if(ststuscode==403){\r",
							"\r",
							"    pm.test(\"Fordidden\", function(){\r",
							"    pm.response.to.have.status(403);\r",
							"    });\r",
							"}\r",
							"\r",
							"else if(ststuscode==405){\r",
							"\r",
							"    pm.test(\"Method Not Allowed\", function(){\r",
							"    pm.response.to.have.status(405);\r",
							"    });\r",
							"}\r",
							"\r",
							"else if(ststuscode==500){\r",
							"\r",
							"    pm.test(\"Internal Server Error\", function(){\r",
							"    pm.response.to.have.status(500);\r",
							"    });\r",
							"}\r",
							"\r",
							"else if(ststuscode==501){\r",
							"\r",
							"    pm.test(\"Not Implimented\", function(){\r",
							"    pm.response.to.have.status(501);\r",
							"    });\r",
							"}\r",
							"\r",
							"else if(ststuscode==502){\r",
							"\r",
							"    pm.test(\"Bad Gateway\", function(){\r",
							"    pm.response.to.have.status(502);\r",
							"    });\r",
							"}\r",
							"\r",
							"else if(ststuscode==503){\r",
							"\r",
							"    pm.test(\"Service Unavailable\", function(){\r",
							"    pm.response.to.have.status(503);\r",
							"    });\r",
							"}\r",
							"\r",
							"else{\r",
							"    pm.test(\"Something Else!!!!\")\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/api/studentsDetails",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"studentsDetails"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Student",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"pm.environment.set(\"id\", jsonData.id)\r",
							"\r",
							"var ststuscode = pm.response.code\r",
							"console.log(ststuscode)\r",
							"\r",
							"if(ststuscode==201){\r",
							"var jsonData = pm.response.json()\r",
							"pm.test(\" 201 Created\", function(){\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"}\r",
							"else if(ststuscode==404){\r",
							"\r",
							"    pm.test(\"Not Found\", function(){\r",
							"    pm.response.to.have.status(404);\r",
							"    });\r",
							"}\r",
							"\r",
							"else if(ststuscode==200){\r",
							"\r",
							"    pm.test(\"OK\", function(){\r",
							"    pm.response.to.have.status(200);\r",
							"    });\r",
							"}\r",
							"\r",
							"\r",
							"\r",
							"else if(ststuscode==202){\r",
							"\r",
							"    pm.test(\"Accepted\", function(){\r",
							"    pm.response.to.have.status(202);\r",
							"    });\r",
							"}\r",
							"\r",
							"else if(ststuscode==400){\r",
							"\r",
							"    pm.test(\"Bad Request\", function(){\r",
							"    pm.response.to.have.status(400);\r",
							"    });\r",
							"}\r",
							"\r",
							"else if(ststuscode==401){\r",
							"\r",
							"    pm.test(\"Unauthorized\", function(){\r",
							"    pm.response.to.have.status(401);\r",
							"    });\r",
							"}\r",
							"\r",
							"else if(ststuscode==403){\r",
							"\r",
							"    pm.test(\"Fordidden\", function(){\r",
							"    pm.response.to.have.status(403);\r",
							"    });\r",
							"}\r",
							"\r",
							"else if(ststuscode==405){\r",
							"\r",
							"    pm.test(\"Method Not Allowed\", function(){\r",
							"    pm.response.to.have.status(405);\r",
							"    });\r",
							"}\r",
							"\r",
							"else if(ststuscode==500){\r",
							"\r",
							"    pm.test(\"Internal Server Error\", function(){\r",
							"    pm.response.to.have.status(500);\r",
							"    });\r",
							"}\r",
							"\r",
							"else if(ststuscode==501){\r",
							"\r",
							"    pm.test(\"Not Implimented\", function(){\r",
							"    pm.response.to.have.status(501);\r",
							"    });\r",
							"}\r",
							"\r",
							"else if(ststuscode==502){\r",
							"\r",
							"    pm.test(\"Bad Gateway\", function(){\r",
							"    pm.response.to.have.status(502);\r",
							"    });\r",
							"}\r",
							"\r",
							"else if(ststuscode==503){\r",
							"\r",
							"    pm.test(\"Service Unavailable\", function(){\r",
							"    pm.response.to.have.status(503);\r",
							"    });\r",
							"}\r",
							"\r",
							"else{\r",
							"    pm.test(\"Something Else!!!!\")\r",
							"}\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var firstName = pm.variables.replaceIn(\"{{$randomFirstName}}\")\r",
							"console.log(\"First Name Value:  \"+ firstName)\r",
							"pm.environment.set(\"firstName\",firstName)\r",
							"\r",
							"var middleName = pm.variables.replaceIn(\"{{$randomLastName}}\")\r",
							"console.log(\"Middle Name Value:  \"+ middleName)\r",
							"pm.environment.set(\"middleName\",middleName)\r",
							"\r",
							"var lastName = pm.variables.replaceIn(\"{{$randomLastName}}\")\r",
							"console.log(\"Last Name Value:  \"+ lastName)\r",
							"pm.environment.set(\"lastName\",lastName)\r",
							"\r",
							"const moment = require('moment')\r",
							"const today = moment()\r",
							"console.log(today.format(\"YYYY-MM-DD\"))\r",
							"pm.environment.set(\"date_of_birth\",today.add(1,'d').format(\"YYYY-MM-DD\"))"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\"first_name\": \"{{firstName}}\", \r\n\"middle_name\": \"{{middleName}}\", \r\n\"last_name\": \"{{lastName}}\", \r\n\"date_of_birth\": \"{{date_of_birth}}\" \r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/api/studentsDetails/{{id}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"studentsDetails",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Specific Student",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var ststuscode = pm.response.code\r",
							"console.log(ststuscode)\r",
							"\r",
							"if(ststuscode==200){\r",
							"var jsonData = pm.response.json()\r",
							"pm.test(\"Status code is 200\", function(){\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"ID Validate\", function(){\r",
							"    pm.expect(jsonData.data.id).to.eql(pm.environment.get(\"id\"));\r",
							"\r",
							"});\r",
							"\r",
							"pm.test(\"First Name Validate\", function(){\r",
							"    pm.expect(jsonData.data.first_name).to.eql(pm.environment.get(\"firstName\"));\r",
							"\r",
							"});\r",
							"\r",
							"pm.test(\"Middle Name Validate\", function(){\r",
							"    pm.expect(jsonData.data.middle_name).to.eql(pm.environment.get(\"middleName\"));\r",
							"\r",
							"});\r",
							"\r",
							"pm.test(\"Last Name Validate\", function(){\r",
							"    pm.expect(jsonData.data.last_name).to.eql(pm.environment.get(\"lastName\"));\r",
							"\r",
							"});\r",
							"\r",
							"pm.test(\"Date of Birth Validate\", function(){\r",
							"    pm.expect(jsonData.data.date_of_birth).to.eql(pm.environment.get(\"date_of_birth\"));\r",
							"\r",
							"});\r",
							"\r",
							"}\r",
							"\r",
							"else if(ststuscode==404){\r",
							"\r",
							"    pm.test(\"Not Found\", function(){\r",
							"    pm.response.to.have.status(404);\r",
							"    });\r",
							"}\r",
							"\r",
							"else if(ststuscode==200){\r",
							"\r",
							"    pm.test(\"OK\", function(){\r",
							"    pm.response.to.have.status(200);\r",
							"    });\r",
							"}\r",
							"\r",
							"else if(ststuscode==201){\r",
							"\r",
							"    pm.test(\"Created\", function(){\r",
							"    pm.response.to.have.status(201);\r",
							"    });\r",
							"}\r",
							"\r",
							"else if(ststuscode==202){\r",
							"\r",
							"    pm.test(\"Accepted\", function(){\r",
							"    pm.response.to.have.status(202);\r",
							"    });\r",
							"}\r",
							"\r",
							"else if(ststuscode==400){\r",
							"\r",
							"    pm.test(\"Bad Request\", function(){\r",
							"    pm.response.to.have.status(400);\r",
							"    });\r",
							"}\r",
							"\r",
							"else if(ststuscode==401){\r",
							"\r",
							"    pm.test(\"Unauthorized\", function(){\r",
							"    pm.response.to.have.status(401);\r",
							"    });\r",
							"}\r",
							"\r",
							"else if(ststuscode==403){\r",
							"\r",
							"    pm.test(\"Fordidden\", function(){\r",
							"    pm.response.to.have.status(403);\r",
							"    });\r",
							"}\r",
							"\r",
							"else if(ststuscode==405){\r",
							"\r",
							"    pm.test(\"Method Not Allowed\", function(){\r",
							"    pm.response.to.have.status(405);\r",
							"    });\r",
							"}\r",
							"\r",
							"else if(ststuscode==500){\r",
							"\r",
							"    pm.test(\"Internal Server Error\", function(){\r",
							"    pm.response.to.have.status(500);\r",
							"    });\r",
							"}\r",
							"\r",
							"else if(ststuscode==501){\r",
							"\r",
							"    pm.test(\"Not Implimented\", function(){\r",
							"    pm.response.to.have.status(501);\r",
							"    });\r",
							"}\r",
							"\r",
							"else if(ststuscode==502){\r",
							"\r",
							"    pm.test(\"Bad Gateway\", function(){\r",
							"    pm.response.to.have.status(502);\r",
							"    });\r",
							"}\r",
							"\r",
							"else if(ststuscode==503){\r",
							"\r",
							"    pm.test(\"Service Unavailable\", function(){\r",
							"    pm.response.to.have.status(503);\r",
							"    });\r",
							"}\r",
							"\r",
							"else{\r",
							"    pm.test(\"Something Else!!!!\")\r",
							"}\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/api/studentsDetails/{{id}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"studentsDetails",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Technical Skills",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var ststuscode = pm.response.code\r",
							"console.log(ststuscode)\r",
							"\r",
							"if(ststuscode==200){\r",
							"var jsonData = pm.response.json()\r",
							"pm.test(\" 200 OK\", function(){\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"}\r",
							"else if(ststuscode==404){\r",
							"\r",
							"    pm.test(\"Not Found\", function(){\r",
							"    pm.response.to.have.status(404);\r",
							"    });\r",
							"}\r",
							"\r",
							"else if(ststuscode==200){\r",
							"\r",
							"    pm.test(\"OK\", function(){\r",
							"    pm.response.to.have.status(200);\r",
							"    });\r",
							"}\r",
							"\r",
							"else if(ststuscode==201){\r",
							"\r",
							"    pm.test(\"Created\", function(){\r",
							"    pm.response.to.have.status(201);\r",
							"    });\r",
							"}\r",
							"\r",
							"else if(ststuscode==202){\r",
							"\r",
							"    pm.test(\"Accepted\", function(){\r",
							"    pm.response.to.have.status(202);\r",
							"    });\r",
							"}\r",
							"\r",
							"else if(ststuscode==400){\r",
							"\r",
							"    pm.test(\"Bad Request\", function(){\r",
							"    pm.response.to.have.status(400);\r",
							"    });\r",
							"}\r",
							"\r",
							"else if(ststuscode==401){\r",
							"\r",
							"    pm.test(\"Unauthorized\", function(){\r",
							"    pm.response.to.have.status(401);\r",
							"    });\r",
							"}\r",
							"\r",
							"else if(ststuscode==403){\r",
							"\r",
							"    pm.test(\"Fordidden\", function(){\r",
							"    pm.response.to.have.status(403);\r",
							"    });\r",
							"}\r",
							"\r",
							"else if(ststuscode==405){\r",
							"\r",
							"    pm.test(\"Method Not Allowed\", function(){\r",
							"    pm.response.to.have.status(405);\r",
							"    });\r",
							"}\r",
							"\r",
							"else if(ststuscode==500){\r",
							"\r",
							"    pm.test(\"Internal Server Error\", function(){\r",
							"    pm.response.to.have.status(500);\r",
							"    });\r",
							"}\r",
							"\r",
							"else if(ststuscode==501){\r",
							"\r",
							"    pm.test(\"Not Implimented\", function(){\r",
							"    pm.response.to.have.status(501);\r",
							"    });\r",
							"}\r",
							"\r",
							"else if(ststuscode==502){\r",
							"\r",
							"    pm.test(\"Bad Gateway\", function(){\r",
							"    pm.response.to.have.status(502);\r",
							"    });\r",
							"}\r",
							"\r",
							"else if(ststuscode==503){\r",
							"\r",
							"    pm.test(\"Service Unavailable\", function(){\r",
							"    pm.response.to.have.status(503);\r",
							"    });\r",
							"}\r",
							"\r",
							"else{\r",
							"    pm.test(\"Something Else!!!!\")\r",
							"}\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \r\n\"id\": 1, \r\n\"language\": [ \r\n\"sample string 1\", \r\n\"sample string 2\" \r\n], \r\n\"yearexp\": \"sample string 2\", \r\n\"lastused\": \"sample string 3\", \r\n\"st_id\": {{id}}\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/api/technicalskills",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"technicalskills"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Student Address",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"\r",
							"var ststuscode = pm.response.code\r",
							"console.log(ststuscode)\r",
							"\r",
							"if(ststuscode==200){\r",
							"var jsonData = pm.response.json()\r",
							"pm.test(\" 200 OK\", function(){\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Status Validate\", function(){\r",
							"    pm.expect(jsonData.status).to.eql(\"true\");\r",
							"\r",
							"});\r",
							"\r",
							"pm.test(\"Massage Validate\", function(){\r",
							"    pm.expect(jsonData.msg).to.eql(\"Add  data success\");\r",
							"\r",
							"});\r",
							"\r",
							"}\r",
							"else if(ststuscode==404){\r",
							"\r",
							"    pm.test(\"Not Found\", function(){\r",
							"    pm.response.to.have.status(404);\r",
							"    });\r",
							"}\r",
							"\r",
							"else if(ststuscode==200){\r",
							"\r",
							"    pm.test(\"OK\", function(){\r",
							"    pm.response.to.have.status(200);\r",
							"    });\r",
							"}\r",
							"\r",
							"else if(ststuscode==201){\r",
							"\r",
							"    pm.test(\"Created\", function(){\r",
							"    pm.response.to.have.status(201);\r",
							"    });\r",
							"}\r",
							"\r",
							"else if(ststuscode==202){\r",
							"\r",
							"    pm.test(\"Accepted\", function(){\r",
							"    pm.response.to.have.status(202);\r",
							"    });\r",
							"}\r",
							"\r",
							"else if(ststuscode==400){\r",
							"\r",
							"    pm.test(\"Bad Request\", function(){\r",
							"    pm.response.to.have.status(400);\r",
							"    });\r",
							"}\r",
							"\r",
							"else if(ststuscode==401){\r",
							"\r",
							"    pm.test(\"Unauthorized\", function(){\r",
							"    pm.response.to.have.status(401);\r",
							"    });\r",
							"}\r",
							"\r",
							"else if(ststuscode==403){\r",
							"\r",
							"    pm.test(\"Fordidden\", function(){\r",
							"    pm.response.to.have.status(403);\r",
							"    });\r",
							"}\r",
							"\r",
							"else if(ststuscode==405){\r",
							"\r",
							"    pm.test(\"Method Not Allowed\", function(){\r",
							"    pm.response.to.have.status(405);\r",
							"    });\r",
							"}\r",
							"\r",
							"else if(ststuscode==500){\r",
							"\r",
							"    pm.test(\"Internal Server Error\", function(){\r",
							"    pm.response.to.have.status(500);\r",
							"    });\r",
							"}\r",
							"\r",
							"else if(ststuscode==501){\r",
							"\r",
							"    pm.test(\"Not Implimented\", function(){\r",
							"    pm.response.to.have.status(501);\r",
							"    });\r",
							"}\r",
							"\r",
							"else if(ststuscode==502){\r",
							"\r",
							"    pm.test(\"Bad Gateway\", function(){\r",
							"    pm.response.to.have.status(502);\r",
							"    });\r",
							"}\r",
							"\r",
							"else if(ststuscode==503){\r",
							"\r",
							"    pm.test(\"Service Unavailable\", function(){\r",
							"    pm.response.to.have.status(503);\r",
							"    });\r",
							"}\r",
							"\r",
							"else{\r",
							"    pm.test(\"Something Else!!!!\")\r",
							"}\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \r\n\"Permanent_Address\": { \r\n\"House_Number\": \"sample string 1\",\r\n\"City\": \"sample string 2\",\r\n \"State\": \"sample string 3\", \r\n\"Country\": \"sample string 4\",\r\n\"PhoneNumber\": [ \r\n{ \r\n\"Std_Code\": \"sample string 1\",\r\n\"Home\": \"sample string 2\",\r\n \"Mobile\": \"sample string 3\" \r\n},\r\n{ \r\n\"Std_Code\": \"sample string 1\",\r\n\"Home\": \"sample string 2\", \r\n\"Mobile\": \"sample string 3\" \r\n} \r\n] \r\n},\r\n\"stId\": {{id}}\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/api/addresses",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"addresses"
					]
				}
			},
			"response": []
		},
		{
			"name": "Final Student Details",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"\r",
							"var ststuscode = pm.response.code\r",
							"console.log(ststuscode)\r",
							"\r",
							"if(ststuscode==200){\r",
							"var jsonData = pm.response.json()\r",
							"pm.test(\" 200 OK\", function(){\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Language Field Validation\", function () {\r",
							"    pm.expect(pm.response.json().data.TechnicalDetails[0].language).to.be.an('array').that.includes.members([\"sample string 1\", \"sample string 2\"]);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Year of Experience (yearexp) Validation\", function () {\r",
							"    pm.expect(pm.response.json().data.TechnicalDetails[0].yearexp).to.be.a('string');\r",
							"});\r",
							"\r",
							"pm.test(\"House Number Validation\", function () {\r",
							"    pm.expect(pm.response.json().data.Address[0].Permanent_Address.House_Number).to.be.a('string');\r",
							"});\r",
							"\r",
							"pm.test(\"City Validation\", function () {\r",
							"    pm.expect(pm.response.json().data.Address[0].Permanent_Address.City).to.be.a('string');\r",
							"});\r",
							"\r",
							"pm.test(\"Country Validation\", function () {\r",
							"    pm.expect(pm.response.json().data.Address[0].Permanent_Address.Country).to.be.a('string');\r",
							"});\r",
							"\r",
							"pm.test(\"Mobile Numbers Validation\", function () {\r",
							"    const mobileNumbers = pm.response.json().data.Address[0].Permanent_Address.PhoneNumber;\r",
							"    pm.expect(mobileNumbers).to.be.an('array');\r",
							"    mobileNumbers.forEach((number) => {\r",
							"        pm.expect(number.Mobile).to.be.a('string');\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Current Address Validation\", function () {\r",
							"    pm.expect(pm.response.json().data.Address[0].Current_Address).to.be.null;\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"}\r",
							"else if(ststuscode==404){\r",
							"\r",
							"    pm.test(\"Not Found\", function(){\r",
							"    pm.response.to.have.status(404);\r",
							"    });\r",
							"}\r",
							"\r",
							"else if(ststuscode==200){\r",
							"\r",
							"    pm.test(\"OK\", function(){\r",
							"    pm.response.to.have.status(200);\r",
							"    });\r",
							"}\r",
							"\r",
							"else if(ststuscode==201){\r",
							"\r",
							"    pm.test(\"Created\", function(){\r",
							"    pm.response.to.have.status(201);\r",
							"    });\r",
							"}\r",
							"\r",
							"else if(ststuscode==202){\r",
							"\r",
							"    pm.test(\"Accepted\", function(){\r",
							"    pm.response.to.have.status(202);\r",
							"    });\r",
							"}\r",
							"\r",
							"else if(ststuscode==400){\r",
							"\r",
							"    pm.test(\"Bad Request\", function(){\r",
							"    pm.response.to.have.status(400);\r",
							"    });\r",
							"}\r",
							"\r",
							"else if(ststuscode==401){\r",
							"\r",
							"    pm.test(\"Unauthorized\", function(){\r",
							"    pm.response.to.have.status(401);\r",
							"    });\r",
							"}\r",
							"\r",
							"else if(ststuscode==403){\r",
							"\r",
							"    pm.test(\"Fordidden\", function(){\r",
							"    pm.response.to.have.status(403);\r",
							"    });\r",
							"}\r",
							"\r",
							"else if(ststuscode==405){\r",
							"\r",
							"    pm.test(\"Method Not Allowed\", function(){\r",
							"    pm.response.to.have.status(405);\r",
							"    });\r",
							"}\r",
							"\r",
							"else if(ststuscode==500){\r",
							"\r",
							"    pm.test(\"Internal Server Error\", function(){\r",
							"    pm.response.to.have.status(500);\r",
							"    });\r",
							"}\r",
							"\r",
							"else if(ststuscode==501){\r",
							"\r",
							"    pm.test(\"Not Implimented\", function(){\r",
							"    pm.response.to.have.status(501);\r",
							"    });\r",
							"}\r",
							"\r",
							"else if(ststuscode==502){\r",
							"\r",
							"    pm.test(\"Bad Gateway\", function(){\r",
							"    pm.response.to.have.status(502);\r",
							"    });\r",
							"}\r",
							"\r",
							"else if(ststuscode==503){\r",
							"\r",
							"    pm.test(\"Service Unavailable\", function(){\r",
							"    pm.response.to.have.status(503);\r",
							"    });\r",
							"}\r",
							"\r",
							"else{\r",
							"    pm.test(\"Something Else!!!!\")\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/api/FinalStudentDetails/{{id}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"FinalStudentDetails",
						"{{id}}"
					]
				}
			},
			"response": []
		}
	]
}